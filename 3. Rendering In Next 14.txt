RENDERING ::

Rendering is the process that transforms the code we write into user interfaces. In next.JS choosing the right time and place to do this rendering is vital for building a performant application. 

There are 3 types of rendering in next.JS ::

CSR , SSR and RSC

1. Client Side Rendering (CSR) => It is a type of rendering where pages or components are rendered entirely on the client (browser) rather than on the server. CSR is often used when you need interactive, dynamic content that heavily relies on browser-side logic, like data fetching after the page is loaded, handling user input, and more. CSR became the standard for single page application (SPA) but there are some drawbacks ::

 SEO => Generating HTML that contains only a single div tag is not optimal for SEO, as it provides little content for search engines to index.

 PERFORMACE => Having the browser (the client) handle all the work such as data fetching, making HTML interactive can slow things down. Each new feature added to the application increase the size of the JS bundle prolonging the wait time for users to see the UI. 

2. Server Side Rendering (SSR) => It allows us to render pages on the server at request time, providing pre-rendered HTML to improve performance, SEO, and initial load times. It solve the problem in CSR like SEO (because search engines can easily index the server-rendered content), User can immediately see the HTML content instead of a black screen or loading spinner becuase now page is already generated at server rather than done by client side js. 
 
  but there are some drawbacks ::

  In SSR when user make req to a page the server send the pre-rendered page to the client with js reference but the full interactivity of the page is on hold untill the js bundle comprising react along with app specific code has been completly downloaded and executed by the browser this process is called "HYDRATION" (It is where the static html page send by the server is brought to live. It is the process where a client-side JavaScript framework (like React) takes control over a pre-rendered HTML page (usually rendered server-side) and attaches event listeners, making the page interactive. In essence, it "rehydrates" the static HTML with dynamic behaviors.). 

  There are 2 server side solution 

  (a). Static Site Generation (SSG) => SSG occurs at build time, when application is eployed on the server. This result in pages that are already rendered and ready to serve. It is ideal for content that does not change often like blog, post, about etc..

  (b). SSR => Render pages on-demand in response to user requests. It is suitable for personalized content like social media feeds, Where the HTML depends on the logged-in user. Provide faster initial page loads and better SEO. 

  DRAWBACKS OF SSR ::

  (a). If a component needs to fetch data from a database or another source (like an API), this fetching must be completed before the server can begin rendering the page. This can delay the server's response time to the browser as the server must finish collecting all necessary data before any part of the page can be sent to the client. 

  (b). For successful hydration, Where react adds interactivity to the server-rendered HTML, the component tree in the browser must exactly match the server-generated component tree. This means all the js for the components must be loaded on the client before we can start hydrating any of them. 

  (c). Have to hydrate everything before we can interact with anything. React hydrate the component tree in a single pass, meaning once it started hydrating it will not stop untill it is finished with the entire tree. As a result all components must be hydrated before we can interact with any of them. 

  This is inefficent if some part of our app are slower than others in this case we still have to load the data for the entire page, Load the js for the entire page and hydrate the entire page. To solve this issue react 18 introduced "Suspense For SSR".
  
  In React CSR, Suspense is a feature used to manage asynchronous code and while code is getting downloaded will show loading states more as a placeholder value.

  When using Suspense in SSR, React can start rendering parts of the UI while it waits for data or code to load. This enables streaming, where parts of the HTML are sent to the client as they are ready, making the page load faster and more interactive, rather than waiting for the entire page to be ready.

  Now we do not have to fetch everything before we can show anything. If particular section delays ihe initial HTML, It can be seamlessly integrated into the stream later. Now initial page load is fast.

  Now to solve the issue where until js of our app is not loaded, client side app hydration cannot start we use "CODE SPITTING"

  Code spitting allows us to mark specific code segments as not immediately necessary for loading, signalling your bundler to segregate them into separate '<script>' tags. Using 'React.lazy' code of some part of application which is not immediately required is seprated from primary js bundle. 

  By this we are doing "SELECTIVE HYDRATION" which is hydration on demand when needed

  DRAWBACKS OF SUSPENSE SSR ::

  (a). Eventhough js code is streamed to the browser asynchronously, eventually the entire code for a web page must be downloaded by the user.

  (b). The current apprach requires that all react components undergo hydration on the client-side, irrespective of their actual need for interactivity. 

  (c). Inspite of server's superior capacity for handling intensive processing tasks, The bulk of js code still executes on user's device. This can slow down the performance on device which is not powerful. 

  TO solve above issue React Server Components (RSC) comes to the rescue ::

3. RSC => A new architecture designed by the react team. This approach aims to leverage the strength of both server and client environment, optimizing efficiencey, load time and interactivity. It involve dual component model ::

 "Client Components" and "Server Components" , This distinction is not based on the functionality of the component but rather on where they execute and the specific environment they are designed to interact with. 

 (a). Client Component => They are the react components we have been using till now before learning this new RSC concept. They are typically rendered on the client-side (CSR). Client Components are rendered and executed entirely on the client-side (in the user's browser).Since they are present in browser environment so they can interact with browser-specific APIs like window, document, localStorage, and react features like useEffect, useState etc. They can also be rendered on the server. 

 (b). Server Component => A new type of react component specifically designed to operate on the server. Unlike client component, their code stays on the server and is never downloaded to the client. Since the are present in server environment so they do not have access to browser-specific APIs and cannot handle things like user interactivity(onChange, onClick event listeners etc, and useEffect(), useState() hooks use).

 BENIFIT OF SERVER COMPONENT ::

 (a). Reduced bundle size as server component do not send js code to the client as they send only rendered HTML page to the client allowing large dependencies to remain server-side, Which benifit the user with slower internet connection or less capable device. Additionally it removes the hydration step which speed up app loading and interactivity time. 

 (b). Direct access to server-side resource like databases and fs module etc, enable efficient data fetching and rendering without needing additonal client side processing. 

 (c). Enhances security as serve side execution keeps sensitive data and login like tokens and API keys away from client-side. 

 (d). Improved data fetching as in client side data fetching happens after the page initial render in useEffect(), which can lead to slower initial page rendering (since the data isn't available at the time of the first render). But in server component data is fetched on the server before the component renders. Since the HTML with the data is sent to the client directly, it results in faster initial page rendering.

 (e). Caching of result from data fetching can be done on the server, which can be reused in subsequent request of similar type. Improves performance by reducing the amount of data fetching required for each request. 

 In RSC Server component take charge of data fetching and static rendering, while Client component are tasked with rendering the interactive elements of the app. RSC architecture in react enables us to use best of both server and client component. 

 ############ HERE next.JS 14 app router is built using RSC architecture ########################

4. ##### Practical Server Or Client Component #####

  (a). By default every component in next.JS for ex, page.tsx, layout.tsx and any newly created component are considered a server component. 

  (b). For example if i create a component inside about-server directory then it by-default a server component. Inside this component if i do console.log("hello") and hit the "/about-server" on browser i will be shown the pre-rendered html page of "/about-server" but that console.log() will not be shown in browser but rather on server (terminal) because server component run on server-side not in client browser.

  (c). To enable user interactivity, access to browser API'S like localStorage, useEffect(), useState() etc. We use client component and in order to make a client component just add a directive or special instruction at the top of server component "use client" to make a client component.
  
  (d). React Server Component (RSC) Lifecycle => Lifecycle means how the server or client component come to life on user's screen. In RSC there are 3 elements: Browser (client), Next.JS (server) and React (UI). In next.JS when user request for a page in browser the next.js app router mathces the requested URL to a server component. next.JS them instruct react to render that server component. React then render that server component and any child component that are also a server component converting them into a special JSON format know as the "RSC PAYLOAD" ( which is a .rsc file downloaded on user network tab when a user request for a page ). During this rendering if any server component uses <Suspense/> then react pauses rendering for that subtree and sends a placeholder value instead. On the other hand client component are prepared with the instruction for later load in the lifecycle. next.JS uses rsc payload that includes client component instructions to generate HTML on the server, This HTML is streamed to user's browser to immediately show a fast non-interactive preview of the route alongside next.JS streams the RSC payload as react renders each unit of UI, React uses this streamed HTML with rsc payload along with client component instruction to progressively render the UI. Once final UI state is presented to the user then client component undergo hydration that transforms our app from static non-interactive display into an interactive UI. 

  On update sequence for refreshing parts of the app, The browser request a refetch of a specific UI such as a full route, next.JS process the request and matches it to the requested server component. Then again react rendering ui on server with client component instructions is done by next.JS but this time no HTML generation for the page again insteadd next.JS create an updated RSC payload and streamed it to the client. Using the RSC payload next.JS trigger the route re-render which result in react re-rendering also which result in merging the updated output of ui with the existing component on screen. 

5. There are 3 types of server rendering strategies ::

 (a). Static Rendering => It is a server rendering strategy where we generate HTML pages at time of building our application that is on "npm run build", It means all the data content for a web page are prepared in advance. This allow the page to be built once, cached by a CDN and served to the client almost instantly. Usefull for static webpages like blog pages, documentation and marketing pages etc. 

 In next.JS app router by-default static rendering take place.  

 Let say we have "/" page which contain Link to "/dasboard" now both are different page which are static in nature so pre-rendered HTML file for both are present when build the application, But when user navigate to "/" which contain a Link to "/dasboard" we will apart from HTML and code related to "/" route in network download it also downloaded the JS code (RSC payload) for "/dasboard", And when user navigate to "/dasboard" nothing new will be downloaded and the "/dasboard" page will be shown instantly. This is because of concept called "PRE-FETCHING"
 
 "PRE-FETCHING" is a technique used to preload a route in the background before user navigate to it. Routes are automatically prefetched as they become visible in the user's viewport, either when the page first loads or as it comes into the view by scrolling. 

 For static routes, the entire route is prefetched and cached by default.

 Here when navigating to "/dashboard" from "/" apoart from RSC payload it will also not download the .HTML file for "/dashboard" because it will be served when user directly navigate to the route "/dashboard".

 (b). Dynamic Rendering => It is a server rendering strategy where routes or HTML are generated on demand at request time, When user send request for it. It is useful when a route has data that is personalized to the user or contains information that can only be known at request time, such as cookies or the URL's search params. EX of dynamic rendering are social media feeds etc..

 In next.JS to perform dynamic rendering we just need to use dynamic functions during rendering. During rendering if a dynamic function is discovered next.JS will switch to dynamic rendering the whole route.

 In next.JS dynamic functions are cookies(), headers(), searchParams() etc.. Using any of these will opt the whole route into dynamic rendering at request time. 

 EX, in "/about" component just use cookies() dynamic function and we are done. Now the HTML page for "/about" will not be generated at build time but at request time on demand by user. 

 (c). Streaming => It is a server rendering strategy that allows progressive UI rendering from the server. Work is divided into chunks and streamed to the client as soon as it is ready. This enables users to see parts of the page immediately, Before the entire content has finished rendering. It improves the initial page load time and rendering of UI elements that rely on slower data fetches, Which would otherwise block the rendering of entire route. 
 
 In next.JS to peform streaming just wrap the component we want to stream render in between <Suspense> Component <Suspense/>. 


