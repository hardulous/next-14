ROUTING ::

There are 2 types of routing in next.JS v-14 depending on what you choose while creating a next.js project, App Router or Page Router, The Page Router (used via the /pages directory) is still available and improved in Next.js 14. It's designed for projects that rely on the classic file-based routing and has full support for both static generation and server-side rendering.


#### APP ROUTER ####

1. Next.JS has a file-based routing mechanism, Where URL paths that user can access in the browser are defined by files and folders in your codebase. 

2. All routes must be placed inside the app folder, Every file that corresponds to a route must be named page.js or page.tsx, Every folder corresponds to a path segment in the browser URL a user can access where name of the path is same as folder name. When all these conventions are followed the file automatically available as a route with name same as the folder name where this file is present. 

 (a). Scenario-1 => To create a home page route for our application all we need to do is create a "page.tsx" file in the root of app directory. NOTE:: if we try to delete layout.tsx file at root of app folder it will be automatically created as it is the entry point of our application (similar to _app.js) which need to be present

 (b). Scenario-2 => Now our app have t additional route "/about" or "/profile", So all we have to do is create 2 folder one with name about and other with name profile and have a page.tsx file that export default a component and we are done. 

 (c). Scenario-3 => Now our app have "/blog" route which will have 2 nested route as well which is "/blog/first" and "/blog/second". To accomplish this next.JS allow us to have nested folder in app directory which result in nested route, So all we have to do is create first and second nested folder in blog folder.

 (d). Scenario-4 => Now our app have product listing and detail page where user can see products list in "/product" route and details of specific product in "/product/id" , But here this "id" is dynamic so have to created dynamic route. The procedure of creating dynamic route is same as in prior version of next.JS which is "[productId]".js and for folder it is [productId]

 (e). Scenario-5 => Now our app have nested dynamic route as well where with each product detail we will have product reviews as well based on id, So we will have a route "/product/232/review/3423". So all we need to do is to have another nested folder in [productId] folder which is review and inside will have [reviewId] folder. 

 (f). Scenario-6 => Let say we are building documentation site where we have 20 features and each feature have 20 concepts so total of 20*20 = 400 (pages) in our app which we can reduce by dynamic route pattern which will cut down no of pages to 2 only, But we need to keep in mind that for each additional route in url we need an additional nested folder in our app router. To solve this we will create only one file that will handle all nested route segment in the url. It is called "catch all segments", To create it just have folder nested in docs with name [...slug] and now slug is an array containing susbequent route segment after "/docs"

 (g). Scenario-7 => Let say user hit route which our app has not handled so in this case next.JS shows default 404 page but in order to show our own custom 404 page in next.JS we can use "not-found.tsx" file at root of app directory. If we want a specific 404 page for every route just create "not-found.tsx" file at that route folder. Let say we want to programatically navigate to 404 page based on some condition let say we want to display 404 page for reviewId > 1000 so for this just execute "notFound()" function from next.JS "next/navigation" package.

3. File Colocation refers to the practice of placing route-specific files (like components, styles, and tests) in the same directory as the route page.tsx file itself. This makes it easier to manage related files and keeps the project well-organized, especially as it scales. Here let say we have "/dashboard" route and have created the dashboard folder in app directory but not created page.tsx file inside it, So it means the route with name "/dashboard" is publically accessible but only content returned by page.tsx file will be sent to the client, And that content must be a default exported react component. So it means inside any folder in app directory we can create route specific file or folder like components, styles, config etc. Which will not effect our page.tsx file. 

4. Private Folders are another way to organize our app codebase in efficient way. It indicates that it is a private implementation detail and should not be considered by the routing system so we can put any types of files inside it, Seprating UI login from routing login. So To create private folder just prefix the folder name with an underscore. 

5. Route Groups allow us to logically group routes and project files of similar feature without affecting the URL path structure. Let say we have authentication route which consist of register, login and forgot-password routes. Now without route group we will be creating seprate folder for each route which is scattered on app directory. It is managable if we are the only developer working on the project since we know everything about the project but when working with team we should ensure good developer exprience, One way is to create a seprate folder "auth" which contain authentication route related work. But now we have additonal route segment "/auth" with each of 3 route, So to avoid the additonal segment of route as well "route groups" comes to the rescue. To create route group use "(route group)" parenthesis as folder name, And now that additional "/auth" in path segment will no longer be there.  

6. Layouts are UI that are shared between multiple pages in the app. When building app it is common to have consistent UI across multiple page like header at the top, footer at the bottom and everything which change between them only but these 2 remain consistent for every pages. 

  (a). To create a layout just export default a react component from either layout.js or layout.tsx file either in app directory (root layout) and in sub folder directory (route specific layout) inside app. 

  (b). That component should accept a children prop that represent a child page component during rendering. 

  (c). Just like routes layouts can be nested as well, Let say if we want a specific layout for "/products" page then all we have to do is to create a layout.tsx file in products folder. 

  (d). Just like route group are created to group together route with similar feature together without having to add additional path segment, Now to selectively apply a layout to a certain segments while leaving other unchanges we use layout in route group. 

7. When building app it is imp to implement proper SEO for increasing visibility and attracting users. Metadata ensures accurate and relevant information to be displayed when our pages are shared or indexed by web crawlers. title, description, Open Graph (OG) tags, and other meta information can be added using the metadata API. This allows you to set metadata dynamically for pages, routes, or layouts. 

 (a). There are 2 way to configure metadata in layout.tsx or page.tsx either by export a static metadata object or export a dynamic generateMetadata() function

 (b). Both layout.tsx and page.tsx file can exporte metadata. If defined in a layout, it applies to all pages in that layout, But if defined in a page, it applies only to that page. 

 (c). Metadata is read in order, from the root level down to the final page level.

 (d). When there is metadata in multiple place for the same route, They go combined but page meta data will replace the layout metadata if they have the same properties. 

 (e). The title field purpose in metadata object is to define the document title. It can be either a string or an object. 

8. In real world app instead of manually entered the URL in browser's address bar to navigate to different routes, Users rely on UI elements like links to navigate. Clicking on them or by programmatic navigation on completion of an action. 

(a). To enable client side navigation we use <Link/> component with href prop that extends the HTML "<a>" element and it is primary way to navigate between the routes in next.JS. To use it we need to import it from "next/link"

(b). Sometime we need to show active link which is styling the link which is currently active in the browser that enhances the user experience. For this we use "usePathname()" hook.

(c). Sometime we need to navigate programatically after some operation is completed for ex, after order is completed in "/order-product" page we will re-direct user to home page. For this we use "useRouter" hook of page router in app router as well. 

9. Templates in next.JS are similar to layouts in the way they wrap each child layout or page that remain consistent for them. But the difference is templates re-render on each navigation even if they are reused between pages., whereas layouts are cached and persistent between navigations unless they contain a Segment that has changed. A template can be defined by default exporting a react component from template.js or template.tsx file. Similar to layout templates should accept a children prop which will render the child layout or page. 

10. Loading file in next.JS allow us to create loading state that are displayed to users while a layout, page and template content is loading. Loading state appears immediately on navigation, giving users the assurance that the app is responsive and actively loading content. To create loading state just create a loading.tsx file in the route folder which export default a react component for which loading state is applied, in our case we apply it on "/blog" route. 

11. To handle error in next.JS we use error file that allows you to display custom error messages or handle errors gracefully whenever an error occurs by export default a react component for ex, while showing a review of a product in "/products/123/reviews/1233" a network error occured. 

 (a). It accept a prop which consist of error object of type Error that caused the error boundary to trigger and a reset() function to retry loading the page or component again that caused the error.

 (b). Error handling in nested routes follows a hierarchical structure where each segment can have its own error.js file to handle errors specific to that segment. Any error that pop up will bubble up to its nearest error.tsx file. ex, right now the error.tsx file is present inside [reviewId] folder so if any error pup it will replace the UI part of [reviewId] segment, Now put error.tsx file at products folder and now if any error come it will replace the whole products segment UI. 

 (c). We can also handle error in layout but not as we do for page. An error.tsx file will hanndle errors for all its nested child segments but does not catch errors thrown in layout.tsx file at same level, Because as the component hierarchy of special file component in below point we can see the layout component sits above the errorBoundary component. 


12. The component or file hierarchy in app router is :: 

layout -> template -> error -> loading -> not-found -> page 

 <Layout>
  <Template>
    <ErrorBoundary fallback={<Error/>}>
      <Suspense fallback={<Loading/>}>
        <ErrorBoundary fallback={<NotFound/>}>
          <Page/>
        </ErrorBoundary>
      </Suspense>
    </ErrorBoundary>
  </Template>
 </Layout>

13. Parallel routes are an advanced routing mechanism that allows the simultaneious rendering of multiple pages within the same layout. 

  Scenario-8 => We will be creating a layout that consist of Header, Footer and centre dynamic page which is dahsboard but instead of single page we want to show multiple page in center which are User Analytics, Revenue Metrics, Notifications etc. To accomplish this we will use Parallel routing. Parallel routes are defined using a feature know as slots. Slots are used to insert content into predefined areas of a layout in parallel routes. Slots allow you to define placeholders within a layout, and then dynamically inject different components or page content into those placeholders. To define a slot, we use '@folder' naming convention. Each slot is then passed as a prop to its layout.tsx file. 

  Scenario-9 => Now we will do sub-navigation on slots in which user can sub-navigate from default list of notifications to archived list of notifications. By default when user go to "/complex-dashboard" the 3 slot show some content. But when i go to route "/complex-dashboard/archived" only @notifications slot has the matching route and the other 2 become unmatched. When dealing with unmatched route the content rendered by next.JS depend on the routing apprach. To solve the issue we use "default.tsx" file  

  Scenario-10 => Parallel route provide a way to render routes on condition. Now based on authenticated user we will show user either a login page or dashboard page. 

14. Another routing pattern is "intercepting routes" which refers to the ability to intercept a user's navigation to a specific route and take some action, such as showing a modal, redirecting, or handling a request conditionally before it reaches its final destination when navigating through the UI (Link component and programmatic navigation), While the route on the browser changes or sharable for page reloads. EX ::

 Scenario-1 => Let say un-authenticated user visit our site and click on login button normally the app will take him to "/login" route from where he will be shown login page, However with intercepting route the login modal will be shown to the user when he click on login button while the route on the browser also changes to "/login" which is sharable means if user access this "/login" route directly then he will be shown "/login" page instead of modal. 

 Scenario-2 => User can see list of photos in "/photos" route and click on any photo leads to URL change in browser to "/photos/[id]" and show photo detail in a modal view which the link is also shareable. 

To configure intercepting routes we need to follow certain conventions ::

 (a). (.)folder_name for which intercepting route we are creating. For us we will have (.)f2 which will create intercepting route for "/f1/f2" folder on same level as f2. 

 (b). It is possilbe to match segment one level above the convention is (..)folder_name for which intercepting route we are creating. 

 (c). To match segments 2 level above we use (..)(..)folder_name

 (d). To match segment from root app directory we use (...)folder_name, Let say we need to intercept "/about" route "/f4" route so (...)about 

@@@@ NOTE :: When created a intercepting route or default.tsx file to handle slot routing sometime in dev server code does not reflect so in this case just re-start the dev server and we are done @@@@@

15. To understand real world example of "parallel route" with "intercepting route" watch video "https://www.youtube.com/watch?v=mVOvx9eVHg0&list=PLC3y8-rFHvwjOKd6gdf4QtV1uYNiQnruI&index=32"

16. Route handler is a special feature that allows you to define API endpoints or handle HTTP requests directly within the /app directory. There is no need to create and configure a seprate server, Route handlers run on server side and are serverless functions (A serverless function is a small, single-purpose, stateless piece of code that runs in a serverless architecture, typically in response to events such as HTTP requests, database updates, or other triggers.). Ensuring sensitive information like private keys remains secure and never get shipped to the browser.

 We need to follow some conventions to implement it ::

 (a). In app router Similar to page route , Route handler must be placed inside app directory. 

 (b). Similar to page route the folder name is the name of route and inside that folder the "page.tsx" file is the content shown on that route, For route handler the name of the folder again is the name of the api endpoint and the inside "route.ts" is the async function that handle the request. EX, "/hello" contain route.ts file which export a GET() function. 

 (c). We will use "/comments" route handler to understand how to handle, GET, POST etc http request in next.JS. 

 (d). HTTP headers represent the metadata associated with an API request and response. To understand it we will work wth "/hello/api" route handler. 

 (e). Cookies are small pieces of data that a server sends to a user's web browser. The browser may store the cookie and send it back to the same server with later requests. Cookies are mainly used for three purposes ::

  1. Session management like logins and shopping carts

  2. Personalization like user preferences and themes

  3. Tracking like recording and analyzing user behaviour

  (f). Route handlers are cached by default when using the GET method with the response object in next.JS 

17. Middleware in next.JS offers a way to intercept and control the flow of requests and responses within your application. It does this at a global level enhance features like redirection, URL rewrites, authentication, headers and cookies management and more. 

 (a). The middleware.ts file should reside at the root of your project or within specific directories to scope its application.