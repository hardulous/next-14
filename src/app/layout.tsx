import { Metadata } from "next";

// Static metadata object
export const metadata: Metadata = {
  title: {

    default: "Next.js Tutorial-Aman",  // fallback title if one not provided in child page 

    template: "%s | Aman Bisht",  // for dynamic title    
    absolute: "",  // use this as a title for this page and ignore above 2 of any parent page
  },
  description: "Generated by Next.js",
};

// children prop will be replaced by chil page component during rendering.
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <header
          style={{
            padding: "1rem",
            backgroundColor: "skyblue",
          }}
        >
          <p>Header</p>
        </header>
        {children}

        <footer
          style={{
            padding: "1rem",
            backgroundColor: "skyblue",
          }}
        >
          <p>Footer</p>
        </footer>
      </body>
    </html>
  );
}

// This component remain consistent for every page in our app. As this layout.tsx file present at root of app directory so it will served as root layout of our app. The root layout is the mandatory layout for every next.JS app. next.JS will automatically re-generate this file even if we have deleted it.

// Here if we navigate to "/profile" , "/about" and any other page then this children prop will be populated with react component default exported from page.tsx file of these 2 folder.

// the title property can be configured in the metadata object with properties like default, template, and absolute. These allow you to control how titles are rendered across different pages or routes.

/*

 (a). default => The default title is used if no specific title is provided for a particular page.
It's essentially a fallback title that ensures your page always has a meaningful title if one isn't explicitly set.

 (b). template => The template option allows for a dynamic structure in the title. You use the %s placeholder, which will be replaced by the specific title present in child page not for current page. 

 (c). absolute => To set the title in child or any page that will ignore or override the dynamic title templates or default title of any parent page.

*/
